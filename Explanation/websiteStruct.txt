Website Structure-

app.py → The main Flask app that initializes everything.
config.py → Keeps database credentials and app settings separate (useful for security).
requirements.txt → List of dependencies (you can install them using pip install -r requirements.txt).
run.py → A script to start the app (python run.py).


static/ → Contains CSS, JavaScript, and images.
    css/ → CSS files are split into different concerns (layout, forms, main styles).
    js/ → JavaScript files are modularized (api.js for backend calls, form-handler.js for handling forms, etc.).

templates/ → HTML templates for different pages.
    base.html → A layout template that other pages can inherit from.
    Other pages (index.html, users.html, contact.html) extend base.html and contain unique content.

routes/ → Separates Flask route functions instead of keeping everything in app.py.
    home.py → Handles homepage-related routes.
    users.py → Routes for user management (adding, deleting, fetching users).
    auth.py → Routes for authentication (login, logout).

models/ → Database logic (queries, models).
    user.py → Handles user-related database functions.
    post.py → Example of another model (e.g., for blog posts).

database/ → Manages the MongoDB database setup.
    db.py → The connection logic to MongoDB.


Scalability: If you want to add more features, you just add more route files or models instead of modifying app.py.

Maintainability: If you need to change CSS, you don’t have to scroll through a huge file—you just edit layout.css or forms.css.

